/**
 * C Terms Mapping
 * 
 * This file contains mappings of C language terms to their definition pages.
 * Used by the term linking system to create hyperlinks to the appropriate documentation.
 */

const C_TERMS_MAPPING = {
    // Keywords
    'auto': { page: 'data_types.html', anchor: 'storage-classes', title: 'Storage Class: auto' },
    'break': { page: 'control_flow.html', anchor: 'break-continue', title: 'Break Statement' },
    'case': { page: 'control_flow.html', anchor: 'switch', title: 'Case Label (Switch Statement)' },
    'char': { page: 'data_types.html', anchor: 'primitive-types', title: 'Character Type' },
    'const': { page: 'data_types.html', anchor: 'type-qualifiers', title: 'Type Qualifier: const' },
    'continue': { page: 'control_flow.html', anchor: 'break-continue', title: 'Continue Statement' },
    'default': { page: 'control_flow.html', anchor: 'switch', title: 'Default Label (Switch Statement)' },
    'do': { page: 'control_flow.html', anchor: 'do-while', title: 'Do-While Loop' },
    'double': { page: 'data_types.html', anchor: 'primitive-types', title: 'Double-Precision Floating Point Type' },
    'else': { page: 'control_flow.html', anchor: 'if-else', title: 'Else Statement' },
    'enum': { page: 'enums.html', anchor: 'enum-basics', title: 'Enumeration Type' },
    'extern': { page: 'data_types.html', anchor: 'storage-classes', title: 'Storage Class: extern' },
    'float': { page: 'data_types.html', anchor: 'primitive-types', title: 'Floating Point Type' },
    'for': { page: 'control_flow.html', anchor: 'for-loop', title: 'For Loop' },
    'goto': { page: 'control_flow.html', anchor: 'goto', title: 'Goto Statement' },
    'if': { page: 'control_flow.html', anchor: 'if-else', title: 'If Statement' },
    'int': { page: 'data_types.html', anchor: 'primitive-types', title: 'Integer Type' },
    'long': { page: 'data_types.html', anchor: 'primitive-types', title: 'Long Integer Type' },
    'register': { page: 'data_types.html', anchor: 'storage-classes', title: 'Storage Class: register' },
    'return': { page: 'functions.html', anchor: 'return', title: 'Return Statement' },
    'short': { page: 'data_types.html', anchor: 'primitive-types', title: 'Short Integer Type' },
    'signed': { page: 'data_types.html', anchor: 'primitive-types', title: 'Signed Type Modifier' },
    'sizeof': { page: 'operators.html', anchor: 'sizeof', title: 'Sizeof Operator' },
    'static': { page: 'data_types.html', anchor: 'storage-classes', title: 'Storage Class: static' },
    'struct': { page: 'structures.html', anchor: 'struct-basics', title: 'Structure Type' },
    'switch': { page: 'control_flow.html', anchor: 'switch', title: 'Switch Statement' },
    'typedef': { page: 'data_types.html', anchor: 'typedef', title: 'Type Definition' },
    'union': { page: 'unions.html', anchor: 'union-basics', title: 'Union Type' },
    'unsigned': { page: 'data_types.html', anchor: 'primitive-types', title: 'Unsigned Type Modifier' },
    'void': { page: 'data_types.html', anchor: 'primitive-types', title: 'Void Type' },
    'volatile': { page: 'data_types.html', anchor: 'type-qualifiers', title: 'Type Qualifier: volatile' },
    'while': { page: 'control_flow.html', anchor: 'while-loop', title: 'While Loop' },
    
    // Standard Library Functions
    'printf': { page: 'standard_library.html', anchor: 'stdio', title: 'printf Function' },
    'scanf': { page: 'standard_library.html', anchor: 'stdio', title: 'scanf Function' },
    'malloc': { page: 'memory_management.html', anchor: 'dynamic-allocation', title: 'malloc Function' },
    'free': { page: 'memory_management.html', anchor: 'dynamic-allocation', title: 'free Function' },
    'calloc': { page: 'memory_management.html', anchor: 'dynamic-allocation', title: 'calloc Function' },
    'realloc': { page: 'memory_management.html', anchor: 'dynamic-allocation', title: 'realloc Function' },
    'strlen': { page: 'strings.html', anchor: 'string-functions', title: 'strlen Function' },
    'strcpy': { page: 'strings.html', anchor: 'string-functions', title: 'strcpy Function' },
    'strcat': { page: 'strings.html', anchor: 'string-functions', title: 'strcat Function' },
    'strcmp': { page: 'strings.html', anchor: 'string-functions', title: 'strcmp Function' },
    'memcpy': { page: 'memory_management.html', anchor: 'memory-functions', title: 'memcpy Function' },
    'memset': { page: 'memory_management.html', anchor: 'memory-functions', title: 'memset Function' },
    'fopen': { page: 'file_io.html', anchor: 'file-operations', title: 'fopen Function' },
    'fclose': { page: 'file_io.html', anchor: 'file-operations', title: 'fclose Function' },
    'fread': { page: 'file_io.html', anchor: 'binary-files', title: 'fread Function' },
    'fwrite': { page: 'file_io.html', anchor: 'binary-files', title: 'fwrite Function' },
    'fprintf': { page: 'file_io.html', anchor: 'text-files', title: 'fprintf Function' },
    'fscanf': { page: 'file_io.html', anchor: 'text-files', title: 'fscanf Function' },
    'exit': { page: 'standard_library.html', anchor: 'stdlib', title: 'exit Function' },
    'perror': { page: 'error_handling.html', anchor: 'error-reporting', title: 'perror Function' },
    'strerror': { page: 'error_handling.html', anchor: 'error-reporting', title: 'strerror Function' },
    'assert': { page: 'debugging.html', anchor: 'assertions', title: 'assert Macro' },
    
    // Preprocessor Directives
    '#include': { page: 'preprocessor.html', anchor: 'include', title: '#include Directive' },
    '#define': { page: 'preprocessor.html', anchor: 'define', title: '#define Directive' },
    '#ifdef': { page: 'preprocessor.html', anchor: 'conditional-compilation', title: '#ifdef Directive' },
    '#ifndef': { page: 'preprocessor.html', anchor: 'conditional-compilation', title: '#ifndef Directive' },
    '#endif': { page: 'preprocessor.html', anchor: 'conditional-compilation', title: '#endif Directive' },
    '#if': { page: 'preprocessor.html', anchor: 'conditional-compilation', title: '#if Directive' },
    '#else': { page: 'preprocessor.html', anchor: 'conditional-compilation', title: '#else Directive' },
    '#elif': { page: 'preprocessor.html', anchor: 'conditional-compilation', title: '#elif Directive' },
    '#pragma': { page: 'preprocessor.html', anchor: 'pragma', title: '#pragma Directive' },
    '#undef': { page: 'preprocessor.html', anchor: 'undef', title: '#undef Directive' },
    '#error': { page: 'preprocessor.html', anchor: 'error', title: '#error Directive' },
    '#line': { page: 'preprocessor.html', anchor: 'line', title: '#line Directive' },
    
    // Common Concepts
    'pointer': { page: 'pointers.html', anchor: 'pointer-basics', title: 'Pointers in C' },
    'array': { page: 'arrays.html', anchor: 'array-basics', title: 'Arrays in C' },
    'string': { page: 'strings.html', anchor: 'string-basics', title: 'Strings in C' },
    'structure': { page: 'structures.html', anchor: 'struct-basics', title: 'Structures in C' },
    'function': { page: 'functions.html', anchor: 'function-basics', title: 'Functions in C' },
    'variable': { page: 'data_types.html', anchor: 'variables', title: 'Variables in C' },
    'constant': { page: 'data_types.html', anchor: 'constants', title: 'Constants in C' },
    'macro': { page: 'preprocessor.html', anchor: 'macros', title: 'Macros in C' },
    'header': { page: 'preprocessor.html', anchor: 'include', title: 'Header Files in C' },
    'scope': { page: 'data_types.html', anchor: 'scope', title: 'Variable Scope in C' },
    'recursion': { page: 'functions.html', anchor: 'recursion', title: 'Recursion in C' },
    'parameter': { page: 'functions.html', anchor: 'parameters', title: 'Function Parameters in C' },
    'argument': { page: 'functions.html', anchor: 'parameters', title: 'Function Arguments in C' },
    'prototype': { page: 'functions.html', anchor: 'prototypes', title: 'Function Prototypes in C' },
    'declaration': { page: 'data_types.html', anchor: 'declarations', title: 'Declarations in C' },
    'definition': { page: 'data_types.html', anchor: 'definitions', title: 'Definitions in C' },
    'initialization': { page: 'data_types.html', anchor: 'initialization', title: 'Variable Initialization in C' },
    'expression': { page: 'operators.html', anchor: 'expressions', title: 'Expressions in C' },
    'statement': { page: 'control_flow.html', anchor: 'statements', title: 'Statements in C' },
    'operator': { page: 'operators.html', anchor: 'operator-basics', title: 'Operators in C' },
    'precedence': { page: 'operators.html', anchor: 'precedence', title: 'Operator Precedence in C' },
    'cast': { page: 'data_types.html', anchor: 'type-conversion', title: 'Type Casting in C' },
    'conversion': { page: 'data_types.html', anchor: 'type-conversion', title: 'Type Conversion in C' },
    'promotion': { page: 'data_types.html', anchor: 'type-conversion', title: 'Type Promotion in C' },
    'literal': { page: 'data_types.html', anchor: 'literals', title: 'Literals in C' },
    'identifier': { page: 'c_basics.html', anchor: 'identifiers', title: 'Identifiers in C' },
    'comment': { page: 'c_basics.html', anchor: 'comments', title: 'Comments in C' },
    'conditional': { page: 'control_flow.html', anchor: 'conditionals', title: 'Conditional Statements in C' },
    'iteration': { page: 'control_flow.html', anchor: 'loops', title: 'Iteration Statements in C' },
    'loop': { page: 'control_flow.html', anchor: 'loops', title: 'Loops in C' },
    'branch': { page: 'control_flow.html', anchor: 'branching', title: 'Branching in C' },
    'jump': { page: 'control_flow.html', anchor: 'jumps', title: 'Jump Statements in C' },
    'label': { page: 'control_flow.html', anchor: 'goto', title: 'Labels in C' },
    'bit field': { page: 'structures.html', anchor: 'bit-fields', title: 'Bit Fields in C' },
    'memory leak': { page: 'memory_management.html', anchor: 'memory-leaks', title: 'Memory Leaks in C' },
    'buffer overflow': { page: 'security.html', anchor: 'buffer-overflows', title: 'Buffer Overflows in C' },
    'null pointer': { page: 'pointers.html', anchor: 'null-pointers', title: 'NULL Pointers in C' },
    'dangling pointer': { page: 'memory_management.html', anchor: 'common-issues', title: 'Dangling Pointers in C' },
    'segmentation fault': { page: 'debugging.html', anchor: 'common-bugs', title: 'Segmentation Faults in C' },
    'undefined behavior': { page: 'debugging.html', anchor: 'common-bugs', title: 'Undefined Behavior in C' },
    'stack': { page: 'memory_management.html', anchor: 'memory-layout', title: 'Stack Memory in C' },
    'heap': { page: 'memory_management.html', anchor: 'memory-layout', title: 'Heap Memory in C' },
    'global variable': { page: 'data_types.html', anchor: 'scope', title: 'Global Variables in C' },
    'local variable': { page: 'data_types.html', anchor: 'scope', title: 'Local Variables in C' },
    'function pointer': { page: 'functions.html', anchor: 'function-pointers', title: 'Function Pointers in C' },
    'callback': { page: 'functions.html', anchor: 'function-pointers', title: 'Callback Functions in C' },
    'errno': { page: 'error_handling.html', anchor: 'errno', title: 'errno in C' },
    'file pointer': { page: 'file_io.html', anchor: 'file-operations', title: 'File Pointers in C' },
    'stream': { page: 'file_io.html', anchor: 'file-operations', title: 'Streams in C' },
    'binary file': { page: 'file_io.html', anchor: 'binary-files', title: 'Binary Files in C' },
    'text file': { page: 'file_io.html', anchor: 'text-files', title: 'Text Files in C' },
    'debugging': { page: 'debugging.html', anchor: 'debugging-basics', title: 'Debugging in C' },
    'error handling': { page: 'error_handling.html', anchor: 'error-basics', title: 'Error Handling in C' },
    'security': { page: 'security.html', anchor: 'security-basics', title: 'Security in C' },
    'code organization': { page: 'code_organization.html', anchor: 'organization-basics', title: 'Code Organization in C' },
    'naming convention': { page: 'naming_conventions.html', anchor: 'naming-basics', title: 'Naming Conventions in C' }
};
